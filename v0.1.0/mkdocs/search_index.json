{
    "docs": [
        {
            "location": "/", 
            "text": "GeneticVariation.jl \nBiological Variation\n\n\n \n \n \n \n \n \n \n\n\nDevelopment builds:\n \n \n \n\n\n\n\nDescription\n\n\nGeneticVariation.jl provides types and methods for working with genetic variation. It provides a VCF and BCF parser, as well as methods for working with variation in sequences such as evolutionary distance computation, and counting different mutation types.\n\n\n\n\nInstallation\n\n\nInstall GeneticVariation from the Julia REPL:\n\n\njulia\n \nPkg\n.\nadd\n(\nGeneticVariation\n)\n\n\n\n\n\n\nIf you are interested in the cutting edge of the development, please check out the master branch to try new features before release.", 
            "title": "Home"
        }, 
        {
            "location": "/#geneticvariationjl-biological-variation", 
            "text": "Development builds:", 
            "title": "GeneticVariation.jl Biological Variation"
        }, 
        {
            "location": "/#description", 
            "text": "GeneticVariation.jl provides types and methods for working with genetic variation. It provides a VCF and BCF parser, as well as methods for working with variation in sequences such as evolutionary distance computation, and counting different mutation types.", 
            "title": "Description"
        }, 
        {
            "location": "/#installation", 
            "text": "Install GeneticVariation from the Julia REPL:  julia   Pkg . add ( GeneticVariation )   If you are interested in the cutting edge of the development, please check out the master branch to try new features before release.", 
            "title": "Installation"
        }, 
        {
            "location": "/io/vcf-bcf/", 
            "text": "VCF and BCF Formatted files\n\n\nVCF is a text-based file format for representing genetic variations.\n\n\nVCF files can be read using \nVCFReader\n, respectively:\n\n\nreader\n \n=\n \nVCF\n.\nReader\n(\nopen\n(\nexample.vcf\n,\n \nr\n))\n\n\nfor\n \nrecord\n \nin\n \nreader\n\n    \n# do something\n\n\nend\n\n\nclose\n(\nreader\n)\n\n\n\n\n\n\nA reader first reads the header section of a file and creates a \nVCF.Header\n object. The \nheader\n function is provided to access the header object of a reader:\n\n\njulia\n \nheader\n(\nreader\n)\n\n\nGeneticVariation.VCF.Header:\n\n\n  metainfo tags: fileformat fileDate source reference contig phasing INFO FILTER FORMAT\n\n\n     sample IDs: NA00001 NA00002 NA00003\n\n\n\njulia\n \nfind\n(\nheader\n(\nreader\n),\n \nFORMAT\n)\n\n\n4-element Array{GeneticVariation.VCF.MetaInfo,1}:\n\n\n GeneticVariation.VCF.MetaInfo:\n\n\n    tag: FORMAT\n\n\n  value: ID=\nGT\n Number=\n1\n Type=\nString\n Description=\nGenotype\n          \n\n\n GeneticVariation.VCF.MetaInfo:\n\n\n    tag: FORMAT\n\n\n  value: ID=\nGQ\n Number=\n1\n Type=\nInteger\n Description=\nGenotype Quality\n\n\n GeneticVariation.VCF.MetaInfo:\n\n\n    tag: FORMAT\n\n\n  value: ID=\nDP\n Number=\n1\n Type=\nInteger\n Description=\nRead Depth\n       \n\n\n GeneticVariation.VCF.MetaInfo:\n\n\n    tag: FORMAT\n\n\n  value: ID=\nHQ\n Number=\n2\n Type=\nInteger\n Description=\nHaplotype Quality\n\n\n\n\n\n\nVCF.MetaInfo\n variables in the header support the following accessors:\n\n\n\n\n\n\n\n\nAccessor\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmetainfotag\n\n\ntag string\n\n\n\n\n\n\nmetainfoval\n\n\nvalue string\n\n\n\n\n\n\nkeys\n\n\nkeys of fields between '\n' and '\n'\n\n\n\n\n\n\nvalues\n\n\nvalues of fields between '\n' and '\n'\n\n\n\n\n\n\n[\nkey\n]\n\n\nvalue of a field with \nkey\n\n\n\n\n\n\n\n\njulia\n \nmetainfo\n \n=\n \nVCF\n.\nMetaInfo\n(\n##FORMAT=\nID=GT,Number=1,Type=String,Description=\n\\\nGenotype\n\\\n)\n\n\nGeneticVariation.VCF.MetaInfo:\n\n\n    tag: FORMAT\n\n\n  value: ID=\nGT\n Number=\n1\n Type=\nString\n Description=\nGenotype\n\n\n\njulia\n \nmetainfotag\n(\nmetainfo\n)\n\n\nFORMAT\n\n\n\njulia\n \nmetainfoval\n(\nmetainfo\n)\n\n\nID=GT,Number=1,Type=String,Description=\\\nGenotype\\\n\n\n\njulia\n \nkeys\n(\nmetainfo\n)\n\n\n4-element Array{String,1}:\n\n\n \nID\n         \n\n\n \nNumber\n     \n\n\n \nType\n       \n\n\n \nDescription\n\n\n\njulia\n \nmetainfo\n[\nID\n]\n\n\nGT\n\n\n\n\n\n\nVCF.Record\n and \nBCF.Record\n variables support the following accessor functions (see the docstring of each accessor for the details):\n\n\n\n\n\n\n\n\nAccessor\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nchrom\n\n\nchromosome name\n\n\n\n\n\n\npos\n\n\nreference position\n\n\n\n\n\n\nid\n\n\nunique identifiers\n\n\n\n\n\n\nref\n\n\nreference bases\n\n\n\n\n\n\nalt\n\n\nalternate bases\n\n\n\n\n\n\nqual\n\n\nPhred-scaled quality score\n\n\n\n\n\n\nfilter\n\n\nfilter status\n\n\n\n\n\n\ninfo\n\n\nadditional information\n\n\n\n\n\n\ninfokeys\n\n\nkeys of additional information\n\n\n\n\n\n\nformat\n\n\ngenotype format\n\n\n\n\n\n\ngenotype\n\n\ngenotype information\n\n\n\n\n\n\n\n\njulia\n \nrecord\n \n=\n \nVCF\n.\nRecord\n(\n20\n\\t\n14370\n\\t\nrs6054257\n\\t\nG\n\\t\nA\n\\t\n29\n\\t\nPASS\n\\t\nNS=3;DP=14;AF=0.5;DB;H2\n\\t\nGT:GQ:DP:HQ\n\\t\n0|0:48:1:51,51\n\\t\n1|0:48:8:51,51\n)\n\n\nGeneticVariation.VCF.Record:\n\n\n   chromosome: 20\n\n\n     position: 14370\n\n\n   identifier: rs6054257\n\n\n    reference: G\n\n\n    alternate: A\n\n\n      quality: 29.0\n\n\n       filter: PASS\n\n\n  information: NS=3 DP=14 AF=0.5 DB H2\n\n\n       format: GT GQ DP HQ\n\n\n     genotype: [1] 0|0 48 1 51,51 [2] 1|0 48 8 51,51\n\n\n\njulia\n \nVCF\n.\nchrom\n(\nrecord\n)\n\n\n20\n\n\n\njulia\n \nVCF\n.\npos\n(\nrecord\n)\n\n\n14370\n\n\n\njulia\n \nVCF\n.\nid\n(\nrecord\n)\n\n\n1-element Array{String,1}:\n\n\n \nrs6054257\n\n\n\njulia\n \nVCF\n.\nref\n(\nrecord\n)\n\n\nG\n\n\n\njulia\n \nVCF\n.\nalt\n(\nrecord\n)\n\n\n1-element Array{String,1}:\n\n\n \nA\n\n\n\njulia\n \nVCF\n.\nqual\n(\nrecord\n)\n\n\n29.0\n\n\n\njulia\n \nVCF\n.\nfilter\n(\nrecord\n)\n\n\n1-element Array{String,1}:\n\n\n \nPASS\n\n\n\njulia\n \nVCF\n.\ninfo\n(\nrecord\n)\n\n\n5-element Array{Pair{String,String},1}:\n\n\n \nNS\n=\n3\n  \n\n\n \nDP\n=\n14\n\n\n \nAF\n=\n0.5\n\n\n \nDB\n=\n   \n\n\n \nH2\n=\n   \n\n\n\njulia\n \nVCF\n.\nformat\n(\nrecord\n)\n\n\n4-element Array{String,1}:\n\n\n \nGT\n\n\n \nGQ\n\n\n \nDP\n\n\n \nHQ\n\n\n\njulia\n \nVCF\n.\ngenotype\n(\nrecord\n)\n\n\n2-element Array{Array{String,1},1}:\n\n\n String[\n0|0\n,\n48\n,\n1\n,\n51,51\n]\n\n\n String[\n1|0\n,\n48\n,\n8\n,\n51,51\n]\n\n\n\njulia\n \nVCF\n.\ngenotype\n(\nrecord\n,\n \n1\n:\n2\n,\n \nGT\n)\n\n\n2-element Array{String,1}:\n\n\n \n0|0\n\n\n \n1|0\n\n\n\njulia\n \nVCF\n.\ngenotype\n(\nrecord\n,\n \n1\n:\n1\n,\n \nGT\n)\n\n\n1-element Array{String,1}:\n\n\n \n0|0\n\n\n\njulia\n \nVCF\n.\ngenotype\n(\nrecord\n,\n \n1\n:\n2\n,\n \nGT\n)\n\n\n2-element Array{String,1}:\n\n\n \n0|0\n\n\n \n1|0", 
            "title": "VCF and BCF formatted files"
        }, 
        {
            "location": "/io/vcf-bcf/#vcf-and-bcf-formatted-files", 
            "text": "VCF is a text-based file format for representing genetic variations.  VCF files can be read using  VCFReader , respectively:  reader   =   VCF . Reader ( open ( example.vcf ,   r ))  for   record   in   reader \n     # do something  end  close ( reader )   A reader first reads the header section of a file and creates a  VCF.Header  object. The  header  function is provided to access the header object of a reader:  julia   header ( reader )  GeneticVariation.VCF.Header:    metainfo tags: fileformat fileDate source reference contig phasing INFO FILTER FORMAT       sample IDs: NA00001 NA00002 NA00003  julia   find ( header ( reader ),   FORMAT )  4-element Array{GeneticVariation.VCF.MetaInfo,1}:   GeneticVariation.VCF.MetaInfo:      tag: FORMAT    value: ID= GT  Number= 1  Type= String  Description= Genotype              GeneticVariation.VCF.MetaInfo:      tag: FORMAT    value: ID= GQ  Number= 1  Type= Integer  Description= Genotype Quality   GeneticVariation.VCF.MetaInfo:      tag: FORMAT    value: ID= DP  Number= 1  Type= Integer  Description= Read Depth           GeneticVariation.VCF.MetaInfo:      tag: FORMAT    value: ID= HQ  Number= 2  Type= Integer  Description= Haplotype Quality   VCF.MetaInfo  variables in the header support the following accessors:     Accessor  Description      metainfotag  tag string    metainfoval  value string    keys  keys of fields between ' ' and ' '    values  values of fields between ' ' and ' '    [ key ]  value of a field with  key     julia   metainfo   =   VCF . MetaInfo ( ##FORMAT= ID=GT,Number=1,Type=String,Description= \\ Genotype \\ )  GeneticVariation.VCF.MetaInfo:      tag: FORMAT    value: ID= GT  Number= 1  Type= String  Description= Genotype  julia   metainfotag ( metainfo )  FORMAT  julia   metainfoval ( metainfo )  ID=GT,Number=1,Type=String,Description=\\ Genotype\\  julia   keys ( metainfo )  4-element Array{String,1}:    ID              Number          Type            Description  julia   metainfo [ ID ]  GT   VCF.Record  and  BCF.Record  variables support the following accessor functions (see the docstring of each accessor for the details):     Accessor  Description      chrom  chromosome name    pos  reference position    id  unique identifiers    ref  reference bases    alt  alternate bases    qual  Phred-scaled quality score    filter  filter status    info  additional information    infokeys  keys of additional information    format  genotype format    genotype  genotype information     julia   record   =   VCF . Record ( 20 \\t 14370 \\t rs6054257 \\t G \\t A \\t 29 \\t PASS \\t NS=3;DP=14;AF=0.5;DB;H2 \\t GT:GQ:DP:HQ \\t 0|0:48:1:51,51 \\t 1|0:48:8:51,51 )  GeneticVariation.VCF.Record:     chromosome: 20       position: 14370     identifier: rs6054257      reference: G      alternate: A        quality: 29.0         filter: PASS    information: NS=3 DP=14 AF=0.5 DB H2         format: GT GQ DP HQ       genotype: [1] 0|0 48 1 51,51 [2] 1|0 48 8 51,51  julia   VCF . chrom ( record )  20  julia   VCF . pos ( record )  14370  julia   VCF . id ( record )  1-element Array{String,1}:    rs6054257  julia   VCF . ref ( record )  G  julia   VCF . alt ( record )  1-element Array{String,1}:    A  julia   VCF . qual ( record )  29.0  julia   VCF . filter ( record )  1-element Array{String,1}:    PASS  julia   VCF . info ( record )  5-element Array{Pair{String,String},1}:    NS = 3       DP = 14    AF = 0.5    DB =        H2 =      julia   VCF . format ( record )  4-element Array{String,1}:    GT    GQ    DP    HQ  julia   VCF . genotype ( record )  2-element Array{Array{String,1},1}:   String[ 0|0 , 48 , 1 , 51,51 ]   String[ 1|0 , 48 , 8 , 51,51 ]  julia   VCF . genotype ( record ,   1 : 2 ,   GT )  2-element Array{String,1}:    0|0    1|0  julia   VCF . genotype ( record ,   1 : 1 ,   GT )  1-element Array{String,1}:    0|0  julia   VCF . genotype ( record ,   1 : 2 ,   GT )  2-element Array{String,1}:    0|0    1|0", 
            "title": "VCF and BCF Formatted files"
        }, 
        {
            "location": "/site_counting/", 
            "text": "Identifying and counting sequence sites\n\n\nGeneticVariation.jl extends the \nsite-counting\n methods in BioSequences.jl, using the same fast bit-parallel techniques to rapidly compute the numbers of different types of mutations between two large biological sequences. Such computation is required for many population genetic analyses of variation, such as computation of evolutionary distances.\n\n\n\n\nTypes of site added\n\n\n#\n\n\nGeneticVariation.Conserved\n \n \nType\n.\n\n\nA \nConserved\n site describes a site where two aligned nucleotides are definately conserved. By definately conserved this means that the symbols of the site are non-ambiguity symbols, and they are the same symbol.\n\n\nsource\n\n\n#\n\n\nGeneticVariation.Mutated\n \n \nType\n.\n\n\nA \nMutated\n site describes a site where two aligned nucleotides are definately mutated. By definately mutated this means that the symbols of the site are non-ambiguity symbols, and they are not the same symbol.\n\n\nsource\n\n\nSee the [site-counting](\nsite-counting\n section of the BioSequences.jl documentation to see how to use the \ncount\n and \ncount_pairwise\n methods to count different types of site.", 
            "title": "Mutation Counting"
        }, 
        {
            "location": "/site_counting/#identifying-and-counting-sequence-sites", 
            "text": "GeneticVariation.jl extends the  site-counting  methods in BioSequences.jl, using the same fast bit-parallel techniques to rapidly compute the numbers of different types of mutations between two large biological sequences. Such computation is required for many population genetic analyses of variation, such as computation of evolutionary distances.", 
            "title": "Identifying and counting sequence sites"
        }, 
        {
            "location": "/site_counting/#types-of-site-added", 
            "text": "#  GeneticVariation.Conserved     Type .  A  Conserved  site describes a site where two aligned nucleotides are definately conserved. By definately conserved this means that the symbols of the site are non-ambiguity symbols, and they are the same symbol.  source  #  GeneticVariation.Mutated     Type .  A  Mutated  site describes a site where two aligned nucleotides are definately mutated. By definately mutated this means that the symbols of the site are non-ambiguity symbols, and they are not the same symbol.  source  See the [site-counting]( site-counting  section of the BioSequences.jl documentation to see how to use the  count  and  count_pairwise  methods to count different types of site.", 
            "title": "Types of site added"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing\n\n\nWe appreciate contributions from users including reporting bugs, fixing issues, improving performance and adding new features.\n\n\nIf you have a question about contributing or using this package, you are encouraged to use the \nBio category of the Julia discourse site\n.\n\n\nDetailed guidance for contributing to all BioJulia packages is provided at the \nBioJulia Contribution Documentation\n.\n\n\nHere we list specific details about contributing and maintainership pertaining specifically to the GeneticVariation.jl package.\n\n\n\n\nNamed maintainers\n\n\nThe named maintainers of this package are Kenta Sato and Ben Ward. It is their responsibility to make final choices about pull requests and issues, although because of our community structure, you will find other maintainers assisting them.\n\n\n\n\nBranching model\n\n\nThe branching model used to develop and make releases of this package is the \nOneFlow\n model summarized in the \nBioJulia Contribution Documentation", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing", 
            "text": "We appreciate contributions from users including reporting bugs, fixing issues, improving performance and adding new features.  If you have a question about contributing or using this package, you are encouraged to use the  Bio category of the Julia discourse site .  Detailed guidance for contributing to all BioJulia packages is provided at the  BioJulia Contribution Documentation .  Here we list specific details about contributing and maintainership pertaining specifically to the GeneticVariation.jl package.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#named-maintainers", 
            "text": "The named maintainers of this package are Kenta Sato and Ben Ward. It is their responsibility to make final choices about pull requests and issues, although because of our community structure, you will find other maintainers assisting them.", 
            "title": "Named maintainers"
        }, 
        {
            "location": "/contributing/#branching-model", 
            "text": "The branching model used to develop and make releases of this package is the  OneFlow  model summarized in the  BioJulia Contribution Documentation", 
            "title": "Branching model"
        }
    ]
}